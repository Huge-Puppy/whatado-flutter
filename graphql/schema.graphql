# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Answer {
  createdAt: DateTime!
  id: Int!
  survey: Survey!
  text: String!
  updatedAt: DateTime!
  votes: [User!]!
}

type BoolApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Boolean
  ok: Boolean
}

type Chat {
  author: User!
  createdAt: DateTime!
  flags: Int!
  forum: Forum!
  id: Int!
  survey: Survey
  text: String!
  updatedAt: DateTime!
}

type ChatApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Chat
  ok: Boolean
}

input ChatFilterInput {
  authorId: Int
  createdAt: String
  forumId: Int
  id: Int
  text: String
  updatedAt: String
}

input ChatInput {
  authorId: Int!
  eventId: Int!
  forumId: Int!
  text: String!
}

type ChatNotification {
  createdAt: DateTime!
  forum: Forum!
  id: Int!
  lastAccessed: DateTime!
  muted: Boolean!
  updatedAt: DateTime!
  user: User!
}

type ChatNotificationsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [ChatNotification!]
  ok: Boolean
}

type ChatsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Chat!]
  ok: Boolean
}

input DateRangeInput {
  endDate: DateTime!
  startDate: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  coordinates: Point!
  createdAt: DateTime!
  creator: User!
  description: String!
  filterGender: Gender!
  filterLocation: String!
  filterMaxAge: Int!
  filterMinAge: Int!
  filterRadius: Float!
  flags: Int!
  forum: Forum!
  group: Group!
  id: Int!
  invited: [User!]!
  location: String!
  pictureUrl: String
  privacy: Privacy!
  relatedInterests: [Interest!]!
  time: DateTime!
  title: String!
  updatedAt: DateTime!
  wannago: [Wannago!]!
}

type EventApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Event
  ok: Boolean
}

input EventFilterInput {
  coordinates: Point
  createdAt: String
  creatorId: Int
  description: String
  filterGender: Gender
  filterLocation: String
  filterMaxAge: Float
  filterMinAge: Float
  filterRadius: Float
  forumId: Int
  groupId: Int
  id: Int
  invitedIds: [Int!]
  location: String
  pictureUrl: String
  privacy: Privacy
  relatedInterestsIds: [Int!]
  time: DateTime
  title: String
  updatedAt: String
  wannagoIds: [Int!]
}

input EventInput {
  coordinates: Point!
  creatorId: Int!
  description: String!
  filterGender: Gender!
  filterLocation: String!
  filterMaxAge: Int!
  filterMinAge: Int!
  filterRadius: Float!
  groupId: Int
  id: Int
  invitedIds: [Int!]!
  location: String!
  pictureUrl: String
  privacy: Privacy!
  relatedInterestsIds: [Int!]!
  time: DateTime!
  title: String!
  wannagoIds: [Int!]!
}

type EventsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Event!]
  ok: Boolean
}

type FieldError {
  field: String
  message: String!
}

type Forum {
  chats: [Chat!]!
  createdAt: DateTime!
  event: Event!
  id: Int!
  updatedAt: DateTime!
  userNotifications: [ChatNotification!]!
}

type ForumApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Forum
  ok: Boolean
}

type ForumsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Forum!]
  ok: Boolean
}

enum Gender {
  BOTH
  FEMALE
  MALE
}

type Group {
  createdAt: DateTime!
  events: [Event!]!
  id: Int!
  name: String!
  owner: Int!
  updatedAt: DateTime!
  userIds: [Int!]!
  users: [User!]!
}

type GroupApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Group
  ok: Boolean
}

input GroupFilterInput {
  createdAt: String
  id: Int
  name: String
  owner: Int
  updatedAt: String
  userIds: [Int!]
}

input GroupInput {
  id: Int
  name: String!
  owner: Int!
  userIds: [Int!]!
}

type GroupsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Group!]
  ok: Boolean
}

type Interest {
  createdAt: String!
  id: Int!
  peopleInterested: [User!]!
  popular: Boolean!
  relatedEvents: [Event!]!
  title: String!
  updatedAt: String!
}

type InterestApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Interest
  ok: Boolean
}

input InterestFilterInput {
  createdAt: String
  id: Int
  peopleInterestedIds: [Int!]
  popular: Boolean
  relatedEventsIds: [Int!]
  title: String
  updatedAt: String
}

type InterestsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Interest!]
  ok: Boolean
}

type IntsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Float!]
  ok: Boolean
}

type JwtResponse {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  acceptFriend(id: Int!): BoolApiResponse!
  access(id: Int!): BoolApiResponse!
  addInterests(interestsText: [String!]!): BoolApiResponse!
  addInvite(eventId: Int!, userId: Int!): EventApiResponse!
  addWannago(eventId: Int!, userId: Int!): EventApiResponse!
  blockUser(userId: Int!): BoolApiResponse!
  checkValidation(code: String!): BoolApiResponse!
  checkValidationLogin(code: String!, phone: String!): BoolApiResponse!
  createChat(options: ChatInput!, surveyOptions: SurveyInput): ChatApiResponse!
  createEvent(options: EventInput!): EventApiResponse!
  createForum(eventId: Int!): ForumApiResponse!
  createGroup(options: GroupInput!): GroupApiResponse!
  createInterest(interestsText: [String!]!): IntsApiResponse!
  createReferral(phone: String!): BoolApiResponse!
  deleteChat(id: Int!): BoolApiResponse!
  deleteEvent(eventId: Int!): BoolApiResponse!
  deleteInterest(id: Int!): BoolApiResponse!
  deleteWannago(id: Int!): BoolApiResponse!
  flagEvent(eventId: Int!): BoolApiResponse!
  flagUser(userId: Int!): BoolApiResponse!
  forgotPassword(phone: String!): BoolApiResponse!
  helloMutation(message: String!): Boolean!
  inviteReferral(number: String!): BoolApiResponse!
  login(options: UserInput!): BoolApiResponse!
  mute(id: Int!): BoolApiResponse!
  register(options: UserInput!): UserApiResponse!
  removeAccount: BoolApiResponse!
  removeInvite(eventId: Int!, userId: Int!): EventApiResponse!
  requestFriend(id: Int!): BoolApiResponse!
  sendCode: BoolApiResponse!
  unblockUser(userId: Int!): BoolApiResponse!
  unfriend(id: Int!): BoolApiResponse!
  unmute(id: Int!): BoolApiResponse!
  unrequestFriend(id: Int!): BoolApiResponse!
  updateChat(options: ChatFilterInput!): BoolApiResponse!
  updateEvent(options: EventFilterInput!): EventApiResponse!
  updateGroup(options: GroupFilterInput!): GroupApiResponse!
  updateInterest(options: InterestFilterInput!): BoolApiResponse!
  updatePhotos(urls: [String!]!): BoolApiResponse!
  updateUser(options: UserFilterInput!): UserApiResponse!
  updateWannago(declined: Boolean!, id: Int!): BoolApiResponse!
  vote(answerId: Int!, chatId: Int!, forumId: Int!): BoolApiResponse!
}

"""Geojson scalar point type"""
scalar Point

enum Privacy {
  GROUP
  PRIVATE
  PUBLIC
}

type Query {
  chat(id: Int!): ChatApiResponse!
  chats(forumId: Int!, skip: Int, take: Int): ChatsApiResponse!
  event(id: Int!): EventApiResponse!
  events(dateRange: DateRangeInput!, skip: Int!, sortType: SortType!, take: Int!): EventsApiResponse!
  flaggedChats: ChatsApiResponse!
  flaggedEvents: EventsApiResponse!
  flaggedUsers: UsersApiResponse!
  forum(id: Int!): ForumApiResponse!
  forumsByEventId(ids: [Int!]!): ForumsApiResponse!
  friendsById(id: Int!): UsersApiResponse!
  groupEvents(groupId: Int!): EventsApiResponse!
  hello: String!
  interest(id: Int!): InterestApiResponse!
  lastChat(forumId: Int!): ChatApiResponse!
  me: UserApiResponse!
  myChatNotifications: ChatNotificationsApiResponse!
  myEvents: EventsApiResponse!
  myGroups: GroupsApiResponse!
  myReferrals: StringsApiResponse!
  numbersNotUsers(numbers: [String!]!): StringsApiResponse!
  otherEvents(dateRange: DateRangeInput!, skip: Int!, sortType: SortType!, take: Int!): EventsApiResponse!
  popularInterests: InterestsApiResponse!
  searchEvents(partial: String!): EventsApiResponse!
  searchGroups(partial: String!): GroupsApiResponse!
  searchInterests(partial: String!): InterestsApiResponse!
  searchUsers(partial: String!): UsersApiResponse!
  user(id: Int!): UserApiResponse!
  users: UsersApiResponse!
  usersById(ids: [Int!]!): UsersApiResponse!
  usersFromContacts(numbers: [String!]!): UsersApiResponse!
}

enum SortType {
  NEWEST
  SOONEST
}

type StringsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [String!]
  ok: Boolean
}

type Subscription {
  chatSubscription(forumId: Int!): Chat!
  helloSubscription: String!
}

type Survey {
  answers: [Answer!]!
  chat: Chat!
  createdAt: DateTime!
  id: Int!
  question: String!
  updatedAt: DateTime!
}

input SurveyInput {
  answers: [String!]!
  question: String!
}

type User {
  bio: String!
  birthday: DateTime!
  blockedUsers: [User!]!
  chatNotifications: [ChatNotification!]!
  createdAt: DateTime!
  deviceId: String!
  flags: Int!
  friendRequests: [User!]!
  friendRequestsIds: [Int!]!
  friends: [User!]!
  friendsIds: [Int!]!
  gender: Gender!
  groups: [Group!]!
  groupsIds: [Int!]!
  id: Int!
  interests: [Interest!]!
  inverseFriends: [User!]!
  inverseFriendsIds: [Int!]!
  invitedEvents: [Event!]!
  invitedEventsIds: [Int!]!
  location: Point
  myEvents: [Event!]!
  myEventsIds: [Int!]!
  name: String!
  phone: String!
  photoUrls: String!
  refreshCount: Int!
  requestedFriends: [User!]!
  requestedFriendsIds: [Int!]!
  updatedAt: DateTime!
  verified: Boolean!
}

type UserApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: User
  ok: Boolean
}

input UserFilterInput {
  bio: String
  birthday: DateTime
  deviceId: String
  gender: Gender
  id: Int
  location: Point
  name: String
  password: String
  phone: String
  photoUrls: String
  verified: Boolean
}

input UserInput {
  birthday: DateTime
  gender: Gender
  location: Point
  name: String
  password: String!
  phone: String
}

type UsersApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [User!]
  ok: Boolean
}

type Wannago {
  createdAt: String!
  declined: Boolean!
  event: Event!
  id: Int!
  updatedAt: String!
  user: User!
}
