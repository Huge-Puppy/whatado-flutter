# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BoolApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Boolean
  ok: Boolean
}

type Chat {
  author: User!
  createdAt: DateTime!
  forum: Forum!
  id: Int!
  text: String!
  updatedAt: DateTime!
}

type ChatApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Chat
  ok: Boolean
}

input ChatFilterInput {
  authorId: Int
  createdAt: String
  forumId: Int
  id: Int
  text: String
  updatedAt: String
}

input ChatInput {
  authorId: Int!
  forumId: Int!
  text: String!
}

type ChatNotification {
  forum: Forum!
  id: Int!
  muted: Boolean!
  notifications: Int!
  user: User!
}

type ChatsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Chat!]
  ok: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  createdAt: DateTime!
  creator: User!
  description: String!
  filterAge: String!
  filterGender: Gender!
  filterLocation: String!
  filterRadius: Float!
  forum: Forum!
  id: Int!
  invited: [User!]!
  location: String!
  pictureUrl: String
  relatedInterests: [Interest!]!
  time: DateTime!
  title: String!
  updatedAt: DateTime!
  wannago: [Wannago!]!
}

type EventApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Event
  ok: Boolean
}

input EventInput {
  creatorId: Int!
  description: String!
  filterAge: String!
  filterGender: Gender!
  filterLocation: String!
  filterRadius: Float!
  id: Int
  invitedIds: [Int!]!
  location: String!
  pictureUrl: String
  relatedInterestsIds: [Int!]!
  time: DateTime!
  title: String!
  wannagoIds: [Int!]!
}

type EventsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Event!]
  ok: Boolean
}

type FieldError {
  field: String
  message: String!
}

type Forum {
  chats: [Chat!]!
  createdAt: String!
  event: Event!
  id: Int!
  updatedAt: String!
  userNotifications: [ChatNotification!]!
}

type ForumApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Forum
  ok: Boolean
}

type ForumsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Forum!]
  ok: Boolean
}

enum Gender {
  BOTH
  FEMALE
  MALE
}

type Interest {
  createdAt: String!
  id: Int!
  peopleInterested: [User!]!
  popular: Boolean!
  relatedEvents: [Event!]!
  title: String!
  updatedAt: String!
}

type InterestApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Interest
  ok: Boolean
}

input InterestFilterInput {
  createdAt: String
  id: Int
  peopleInterestedIds: [Int!]
  popular: Boolean
  relatedEventsIds: [Int!]
  title: String
  updatedAt: String
}

input InterestInput {
  id: Int
  peopleInterestedIds: [Int!]!
  popular: Boolean!
  relatedEventsIds: [Int!]!
  title: String!
}

type InterestsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Interest!]
  ok: Boolean
}

type JwtResponse {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  addInterests(interestsText: [String!]!): BoolApiResponse!
  addInvite(eventId: Int!, userId: Int!): EventApiResponse!
  addWannago(eventId: Int!, userId: Int!): EventApiResponse!
  changeUsername(username: String!): BoolApiResponse!
  createChat(options: ChatInput!): ChatApiResponse!
  createEvent(options: EventInput!): EventApiResponse!
  createForum(eventId: Int!): ForumApiResponse!
  createInterest(options: InterestInput!): InterestApiResponse!
  deleteChat(id: Float!): BoolApiResponse!
  deleteEvent(id: Float!): BoolApiResponse!
  deleteInterest(id: Float!): BoolApiResponse!
  deleteWannago(id: Int!): BoolApiResponse!
  forgotPassword(email: String!): BoolApiResponse!
  helloMutation(message: String!): Boolean!
  login(options: UserInput!): UserApiResponse!
  register(options: UserInput!): UserApiResponse!
  updateBio(bio: String!): BoolApiResponse!
  updateChat(options: ChatFilterInput!): BoolApiResponse!
  updateEvent(options: EventInput!): EventApiResponse!
  updateInterest(options: InterestFilterInput!): BoolApiResponse!
  updatePhotos(urls: [String!]!): BoolApiResponse!
  updateProfilePhoto(url: String!): BoolApiResponse!
  updateWannago(declined: Boolean!, id: Int!): BoolApiResponse!
}

type Query {
  chat(id: Float!): ChatApiResponse!
  chats(forumId: Int!): ChatsApiResponse!
  event(id: Float!): Event
  events: EventsApiResponse!
  forum(id: Float!): ForumApiResponse!
  forumsByEventId(ids: [Int!]!): ForumsApiResponse!
  hello: String!
  interest(id: Float!): InterestApiResponse!
  lastChat(forumId: Int!): ChatApiResponse!
  me: UserApiResponse!
  myEvents: EventsApiResponse!
  popularInterests: InterestsApiResponse!
  searchInterests(partial: String!): InterestsApiResponse!
  user(id: Int!): UserApiResponse!
  users: UsersApiResponse!
  usersById(ids: [Int!]!): UsersApiResponse!
}

type Subscription {
  chatSubscription: Chat!
  helloSubscription: String!
  me_sub: String!
}

type User {
  bio: String!
  birthday: DateTime!
  chatNotifications: [ChatNotification!]!
  createdAt: DateTime!
  email: String!
  id: Int!
  interests: [Interest!]!
  myEvents: [Event!]!
  photoUrls: String!
  profilePhotoUrl: String!
  refreshCount: Int!
  updatedAt: DateTime!
  username: String!
  verified: Boolean!
}

type UserApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: User
  ok: Boolean
}

input UserInput {
  birthday: DateTime
  email: String
  password: String!
  username: String
}

type UsersApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [User!]
  ok: Boolean
}

type Wannago {
  declined: Boolean!
  event: Event!
  id: Int!
  user: User!
}
