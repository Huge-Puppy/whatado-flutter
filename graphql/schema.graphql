# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BoolApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Boolean
  ok: Boolean
}

type Chat {
  author: User!
  createdAt: DateTime!
  forum: Forum!
  id: Int!
  text: String!
  updatedAt: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Event {
  createdAt: DateTime!
  creator: User!
  description: String!
  filterAge: String!
  filterGender: Gender!
  filterLocation: String!
  filterRadius: Float!
  forum: Forum!
  id: Int!
  location: String!
  pictureUrl: String!
  relatedInterests: [Interest!]!
  time: DateTime!
  title: String!
  updatedAt: DateTime!
  wannago: [User!]!
}

type EventApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: Event
  ok: Boolean
}

input EventFilterInput {
  creatorId: [Int!]
  description: String
  filterAge: String
  filterGender: Gender
  filterLocation: String
  filterRadius: Float
  id: Int
  location: String
  pictureUrl: String
  relatedInterestsIds: [Int!]
  time: DateTime
  title: String
}

input EventInput {
  creatorId: [Int!]!
  description: String!
  filterAge: String!
  filterGender: Gender!
  filterLocation: String!
  filterRadius: Float!
  location: String!
  pictureUrl: String
  relatedInterestsIds: [Int!]!
  time: DateTime!
  title: String!
}

type EventsApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [Event!]
  ok: Boolean
}

type FieldError {
  field: String
  message: String!
}

type Forum {
  chats: [Chat!]!
  createdAt: String!
  event: Event!
  id: Int!
  updatedAt: String!
}

enum Gender {
  BOTH
  FEMALE
  MALE
}

type Interest {
  createdAt: String!
  description: String!
  id: Int!
  peopleInterested: [User!]!
  title: String!
  updatedAt: String!
}

type JwtResponse {
  accessToken: String!
  refreshToken: String!
}

type Mutation {
  createEvent(options: EventInput!): EventApiResponse!
  deleteEvent(id: Float!): BoolApiResponse!
  forgotPassword(email: String!): BoolApiResponse!
  login(options: UserInput!): UserApiResponse!
  register(options: UserInput!): UserApiResponse!
  updateEvent(options: EventFilterInput!): BoolApiResponse!
}

type Query {
  event(id: Float!): Event
  events: EventsApiResponse!
  hello: String!
  me: UserApiResponse
  users: UsersApiResponse!
}

type User {
  birthday: DateTime!
  createdAt: DateTime!
  email: String!
  id: Int!
  interests: [Interest!]!
  myEvents: [Event!]!
  profilePhotoUrl: String!
  refreshCount: Int!
  updatedAt: DateTime!
  username: String!
  verified: Boolean!
}

type UserApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: User
  ok: Boolean
}

input UserInput {
  birthday: DateTime
  email: String
  password: String!
  username: String
}

type UsersApiResponse {
  errors: [FieldError!]
  jwt: JwtResponse
  nodes: [User!]
  ok: Boolean
}
